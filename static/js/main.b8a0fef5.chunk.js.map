{"version":3,"sources":["Components/Terminal/Terminal.js","Pages/Contact/Contact.js","serviceWorker.js","index.js"],"names":["Content","props","messageEnd","React","createRef","useEffect","current","scrollIntoView","behavior","item","map","c","dangerouslySetInnerHTML","__html","ref","Input","useState","inputText","setInputText","getPrintableKey","e","key","getUniKey","s","split","cmd","args","help","cls","ls","cat","onEnter","praseCommand","join","preventDefault","slice","onCls","document","addEventListener","removeEventListener","className","Terminal","contents","setContents","history","setHistory","data-content","inputhist","newcontent","Contact","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUA6BA,SAASA,EAAQC,GACf,IAAMC,EAAaC,IAAMC,YAIzB,OAHAC,qBAAU,WACRH,EAAWI,QAAQC,eAAe,CAAEC,SAAU,cAG9C,6BACGP,EAAMQ,KAAKC,KAAI,SAAAC,GAAC,OACf,yBAAKC,wBAAyB,CAAEC,OAAQF,QAE1C,yBAAKG,IAAKZ,KAKhB,SAASa,EAAMd,GAAQ,IAAD,EACce,mBAAS,IADvB,mBACbC,EADa,KACFC,EADE,KAUpB,SAASC,EAAgBC,GACT,UAAVA,EAAEC,KACNH,EAAa,GAAD,mBAAKD,GAAL,CAAgBG,EAAEC,OAEhC,SAASC,EAAUF,GACjB,OAAQA,EAAEC,KACR,IAAK,SAYT,SAAsBE,GAAI,IAAD,EACAA,EAAEC,MAAM,KADR,iBAChBC,EADgB,KACRC,EADQ,WAEvB,OAAQD,GACN,IAAK,OACHE,EAAI,WAAJ,cAAQD,IACRR,EAAa,IACb,MACF,IAAK,QACHU,EAAG,WAAH,cAAOF,IACPR,EAAa,IACb,MACF,IAAK,KACHW,EAAE,WAAF,cAAMH,IACNR,EAAa,IACb,MACF,IAAK,MACHY,EAAG,WAAH,cAAOJ,IACPR,EAAa,IACb,MACF,QACEjB,EAAM8B,QAAQR,EAAd,yBAAmCE,IACnCP,EAAa,KA/Bbc,CADUf,EAAUgB,KAAK,KAEzB,MACF,IAAK,YACHb,EAAEc,iBACFhB,EAAaD,EAAUkB,MAAM,GAAI,IACjC,MACF,QACE,QA2BN,SAASR,IACP1B,EAAM8B,QACJd,EADF,sLAUF,SAASa,IACP,gDACE,IAAK,UACH7B,EAAM8B,QACJd,EADF,ydAcA,MACF,IAAK,UACHhB,EAAM8B,QAAQd,EAAd,+BACA,MACF,QACEhB,EAAM8B,QACJd,EADF,2CASN,SAASY,IACP5B,EAAM8B,QAAQd,EAAd,mBAEF,SAASW,IACP3B,EAAMmC,QAER,OAlGA/B,qBAAU,WAGR,OAFAgC,SAASC,iBAAiB,WAAYnB,GACtCkB,SAASC,iBAAiB,UAAWhB,GAC9B,WACLe,SAASE,oBAAoB,WAAYpB,GACzCkB,SAASE,oBAAoB,UAAWjB,OA8F1C,6BACGL,EACD,0BAAMuB,UAAU,WAKPC,MArJf,WAAqB,IAAD,EACczB,mBAAS,CAAC,yJADxB,mBACX0B,EADW,KACDC,EADC,OAOY3B,mBAAS,IAPrB,mBAOX4B,EAPW,KAOFC,EAPE,KAgBlB,OACE,yBAAKL,UAAU,WAAWM,eAAa,WACrC,yBAAKN,UAAU,QACb,kBAACxC,EAAD,CAASS,KAAMiC,IACf,kBAAC3B,EAAD,CAAOgB,QAXG,SAACgB,EAAWC,GAC1BH,EAAW,GAAD,mBAAKD,GAAL,CAAc,CAACG,MACzBJ,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAACM,OASEZ,MAPX,WAClBO,EAAY,UCJDM,E,iLARP,OACA,yBAAKT,UAAU,sBACX,kBAAC,EAAD,W,GAJUrC,IAAM+C,WCSRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAapB,SAASqB,eAAe,SD6H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b8a0fef5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Terminal.css';\r\n\r\nfunction Terminal() {\r\n  const [contents, setContents] = useState([\r\n    `\r\n  Welcome to my portfolio\r\n  <br />\r\n  If you're interested by my porfolio you can type \"help\" to see available commands and get started. Thanks.`\r\n  ]);\r\n  const [history, setHistory] = useState([]);\r\n\r\n  const onEnter = (inputhist, newcontent) => {\r\n    setHistory([...history, [inputhist]]);\r\n    setContents([...contents, [newcontent]]);\r\n  };\r\n  const clearScreen = () => {\r\n    setContents([]);\r\n  };\r\n  return (\r\n    <div className=\"terminal\" data-content=\"kidkrub\">\r\n      <div className=\"body\">\r\n        <Content item={contents} />\r\n        <Input onEnter={onEnter} onCls={clearScreen} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Content(props) {\r\n  const messageEnd = React.createRef();\r\n  useEffect(() => {\r\n    messageEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n  });\r\n  return (\r\n    <div>\r\n      {props.item.map(c => (\r\n        <div dangerouslySetInnerHTML={{ __html: c }} />\r\n      ))}\r\n      <div ref={messageEnd}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Input(props) {\r\n  const [inputText, setInputText] = useState([]);\r\n  useEffect(() => {\r\n    document.addEventListener('keypress', getPrintableKey);\r\n    document.addEventListener('keydown', getUniKey);\r\n    return function cleanup() {\r\n      document.removeEventListener('keypress', getPrintableKey);\r\n      document.removeEventListener('keydown', getUniKey);\r\n    };\r\n  });\r\n  function getPrintableKey(e) {\r\n    if (e.key === 'Enter') return;\r\n    setInputText([...inputText, e.key]);\r\n  }\r\n  function getUniKey(e) {\r\n    switch (e.key) {\r\n      case 'Enter':\r\n        const s = inputText.join('');\r\n        praseCommand(s);\r\n        break;\r\n      case 'Backspace':\r\n        e.preventDefault();\r\n        setInputText(inputText.slice(0, -1));\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n  function praseCommand(s) {\r\n    const [cmd, ...args] = s.split(' ');\r\n    switch (cmd) {\r\n      case 'help':\r\n        help(...args);\r\n        setInputText([]);\r\n        break;\r\n      case 'clear':\r\n        cls(...args);\r\n        setInputText([]);\r\n        break;\r\n      case 'ls':\r\n        ls(...args);\r\n        setInputText([]);\r\n        break;\r\n      case 'cat':\r\n        cat(...args);\r\n        setInputText([]);\r\n        break;\r\n      default:\r\n        props.onEnter(s, `Unknow command ${cmd}`);\r\n        setInputText([]);\r\n    }\r\n  }\r\n  function help() {\r\n    props.onEnter(\r\n      inputText,\r\n      `\r\n    <div class=\"help\">\r\n      <div>ls</div><div>list directory contents</div>\r\n      <div>cat</div><div>concatenate and print files example: cat profile</div>\r\n    </div>\r\n    `\r\n    );\r\n  }\r\n  function cat(...args) {\r\n    switch (args[0]) {\r\n      case 'profile':\r\n        props.onEnter(\r\n          inputText,\r\n          `Name: Kritsada Moungkhao\r\n          <br/ >\r\n          Birth date: 03/05/1996\r\n          <br/ >\r\n          Hobbies: Read books, play games\r\n          <br/ >\r\n          Education: Bachelorâ€™s degree in Logistics Engineering from King Mongkut's University of Technology North Bangkok\r\n          <br/ >\r\n          LinkedIn: <a href=\"https://www.linkedin.com/in/kidkrub\" target=\"_blank\">Profile</a>\r\n          <br/>\r\n          Current job: Junior Developer at Atvantage`\r\n        );\r\n        break;\r\n      case 'contact':\r\n        props.onEnter(inputText, `kritsadamoungkhao@gmail.com`);\r\n        break;\r\n      default:\r\n        props.onEnter(\r\n          inputText,\r\n          `\r\n          file not found\r\n          `\r\n        );\r\n    }\r\n  }\r\n\r\n  function ls(...args) {\r\n    props.onEnter(inputText, `profile contact`);\r\n  }\r\n  function cls() {\r\n    props.onCls();\r\n  }\r\n  return (\r\n    <pre>\r\n      {inputText}\r\n      <span className=\"blink\"></span>\r\n    </pre>\r\n  );\r\n}\r\n\r\nexport default Terminal;\r\n","import React from 'react'\r\nimport './Contact.css'\r\nimport Terminal from '../../Components/Terminal/Terminal'\r\nclass Contact extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className='terminal-container'>\r\n            <Terminal />\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Contact from './Pages/Contact'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Contact />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}